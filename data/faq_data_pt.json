{
  "faq": [
    {
      "question": "O que é o AI FAQ Bot?",
      "answer": "O AI FAQ Bot é uma aplicação FastAPI que fornece uma API para gerenciar e consultar FAQs usando IA."
    },
    {
      "question": "Como eu uso a API?",
      "answer": "Você pode usar a API enviando requisições para os endpoints definidos na documentação. Verifique /docs para a interface interativa do Swagger."
    },
    {
      "question": "Quais tecnologias são usadas?",
      "answer": "O bot é construído com Python, FastAPI, e usa as APIs da OpenAI para tarefas de processamento de linguagem natural como sumarização e embeddings."
    },
    {
      "question": "Como funciona a busca semântica?",
      "answer": "A busca semântica funciona convertendo perguntas em representações numéricas (embeddings) e encontrando as correspondências mais próximas com base na similaridade de cossenos. Isso permite encontrar respostas para perguntas que são semanticamente similares, e não apenas por correspondência de palavras-chave."
    },
    {
      "question": "Onde os dados do FAQ são armazenados?",
      "answer": "Os dados do FAQ são armazenados em um arquivo JSON localizado em `data/faq_data.json`."
    },
    {
      "question": "Como eu executo a aplicação?",
      "answer": "Você pode executar a aplicação localmente usando `uvicorn app.main:app --reload`. Certifique-se de ter instalado todas as dependências do `requirements.txt`."
    },
    {
      "question": "Como posso executar o projeto com Docker?",
      "answer": "Você pode usar o `Dockerfile` e o `docker-compose.yml` fornecidos para construir e executar a aplicação em um ambiente containerizado. Simplesmente execute `docker-compose up`."
    },
    {
      "question": "O que são embeddings?",
      "answer": "Embeddings são representações vetoriais de texto, onde palavras e frases com significados semelhantes são colocadas mais próximas em um espaço multidimensional. Nós os usamos para entender o significado semântico das perguntas."
    },
    {
      "question": "Como eu gero novamente os embeddings para o FAQ?",
      "answer": "Os embeddings são gerados automaticamente se o arquivo `faq_embeddings.pkl` não for encontrado. Para forçar a regeneração, você pode deletar este arquivo e reiniciar a aplicação. Um endpoint de API para isso também está planejado."
    },
    {
      "question": "Qual é o propósito do arquivo `requirements.txt`?",
      "answer": "O arquivo `requirements.txt` lista todos os pacotes Python dos quais o projeto depende. Você pode instalar todos eles executando `pip install -r requirements.txt`."
    },
    {
      "question": "Como a chave da API da OpenAI é gerenciada?",
      "answer": "A chave da API da OpenAI deve ser definida como uma variável de ambiente chamada `OPENAI_API_KEY`. A aplicação carrega esta variável para configurar o cliente OpenAI. Ela não é armazenada no código."
    },
    {
      "question": "Posso usar um modelo de embedding diferente?",
      "answer": "Sim, você pode mudar o modelo modificando o parâmetro `model` na chamada da função `get_embeddings` dentro do arquivo `openai_services.py`."
    },
    {
      "question": "Como posso contribuir para o projeto?",
      "answer": "Contribuições são bem-vindas! Você pode contribuir fazendo um fork do repositório, criando uma nova branch para sua feature ou correção de bug, e enviando um pull request. Por favor, siga o estilo de código existente."
    },
    {
      "question": "Qual é a licença deste projeto?",
      "answer": "Este projeto está licenciado sob a Licença MIT. Você pode encontrar o texto completo da licença no arquivo `LICENSE`."
    },
    {
      "question": "Como obtenho o resumo de um vídeo do YouTube?",
      "answer": "Você pode usar o endpoint `/youtube/summary`. Envie uma requisição POST com um corpo JSON contendo a `video_url` para obter um resumo estruturado da transcrição do vídeo."
    },
    {
      "question": "O que devo fazer se a busca semântica retornar resultados irrelevantes?",
      "answer": "Se os resultados da busca não forem relevantes, os dados do FAQ subjacente podem não conter a informação correta. Considere adicionar mais pares de P&R relevantes ao `faq_data.json` e gerar novamente os embeddings. Você também pode experimentar com diferentes modelos de embedding."
    },
    {
      "question": "Existe autenticação na API?",
      "answer": "Atualmente, a API está aberta por simplicidade. Para ambientes de produção, é altamente recomendável implementar uma camada de autenticação usando os utilitários de segurança do FastAPI (como OAuth2 ou Chaves de API)."
    },
    {
      "question": "Como os logs da aplicação são gerenciados?",
      "answer": "A aplicação está configurada para registrar eventos tanto no console quanto em um arquivo no diretório `logs/`. A configuração de logging pode ser ajustada em `app/config/logging.py`."
    },
    {
      "question": "Qual é o principal framework web usado neste projeto?",
      "answer": "O projeto é construído usando FastAPI, um framework web moderno e rápido para construir APIs com Python."
    },
    {
      "question": "Qual ferramenta é usada para testes?",
      "answer": "O projeto usa Pytest, um framework de testes poderoso e popular para Python."
    },
    {
      "question": "Como a aplicação é servida durante o desenvolvimento?",
      "answer": "Uvicorn, um servidor ASGI, é usado para executar a aplicação, especialmente com a flag `--reload` para uma melhor experiência de desenvolvimento."
    },
    {
      "question": "Quais ferramentas garantem a qualidade do código?",
      "answer": "O projeto usa Black para formatação de código consistente e Flake8 para linting para capturar problemas de estilo e erros."
    },
    {
      "question": "Quais são os pré-requisitos para configurar o projeto?",
      "answer": "Você precisa ter Python 3.10+ e Git instalados em seu sistema."
    },
    {
      "question": "Qual é o comando para iniciar a aplicação localmente?",
      "answer": "Você pode iniciar a aplicação executando `uvicorn app.main:app --reload --host 0.0.0.0 --port 8000`."
    },
    {
      "question": "Quais são as diretrizes para contribuir com o projeto?",
      "answer": "Os contribuidores devem seguir o estilo PEP 8, adicionar testes para novas funcionalidades, atualizar a documentação conforme necessário e usar mensagens de commit significativas."
    },
    {
      "question": "Onde posso encontrar ajuda ou relatar um problema?",
      "answer": "Você pode verificar a página de Issues do GitHub. Se o seu problema não estiver listado, você pode criar uma nova issue com informações detalhadas."
    },
    {
      "question": "Como posso usar meus próprios dados de FAQ com a API?",
      "answer": "Você pode fornecer uma URL para o seu próprio arquivo `faq_data.json` através do parâmetro `faq_url` no endpoint `/api/v1/faq/search`. A API irá carregar e usar seus dados dinamicamente."
    },
    {
      "question": "O que acontece se eu fornecer uma URL inválida para os dados do FAQ?",
      "answer": "A API inclui um tratamento de erros robusto. Se a URL for inválida, inacessível ou o conteúdo não for um JSON válido, a API retornará um erro HTTP específico (por exemplo, 400 Bad Request) com uma mensagem descritiva."
    },
    {
      "question": "Como os embeddings são cacheados?",
      "answer": "Quando você fornece uma `faq_url`, o serviço gera embeddings para esse FAQ e os armazena em cache na memória. Requisições subsequentes usando a mesma URL serão muito mais rápidas, pois usarão os embeddings cacheados."
    },
    {
      "question": "Qual é o modelo de embedding padrão?",
      "answer": "O serviço usa o modelo `text-embedding-3-small` da OpenAI por padrão, que oferece um bom equilíbrio entre desempenho e custo. Isso pode ser configurado no arquivo `openai_services.py`."
    },
    {
      "question": "Qual é o propósito do diretório `app/schemas`?",
      "answer": "O diretório `app/schemas` contém modelos Pydantic que definem os formatos dos dados para as requisições e respostas da API, garantindo a validação dos dados e contratos de API claros."
    },
    {
      "question": "Qual é a diferença entre as branches `main` e `standalone`?",
      "answer": "A branch `main` contém a API que pode carregar FAQs de qualquer URL. A branch `standalone` é projetada para funcionar com um arquivo `faq_data.json` local e embutido, tornando-a uma aplicação autônoma sem o recurso de carregamento dinâmico."
    },
    {
      "question": "Como posso alterar a porta padrão da aplicação?",
      "answer": "Você pode alterar a porta modificando o comando `uvicorn`. Por exemplo, para rodar na porta 8080, use: `uvicorn app.main:app --reload --port 8080`."
    }
  ]
}
